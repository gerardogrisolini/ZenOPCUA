import XCTest
import NIO
@testable import ZenOPCUA

final class ZenOPCUATests: XCTestCase {
    var eventLoopGroup: MultiThreadedEventLoopGroup!
    
    override func setUp() {
        eventLoopGroup = MultiThreadedEventLoopGroup(numberOfThreads: System.coreCount)
    }
    
    override func tearDown() {
        try! eventLoopGroup.syncShutdownGracefully()
    }

    func testExample() {

        let opcua = ZenOPCUA(
            eventLoopGroup: eventLoopGroup,
            endpoint: "opc.tcp://concentratoreviet.ddns.net:4842",
            messageSecurityMode: .none,
            securityPolicy: .none
        )

//        let opcua = ZenOPCUA(
//            eventLoopGroup: eventLoopGroup,
//            endpoint: "opc.tcp://MBP-di-Gerardo.homenet.telecomitalia.it:53530/OPCUA/SimulationServer",
//            messageSecurityMode: .none,
//            securityPolicy: .none
//        )

//        var count = 0
//        let expectation = XCTestExpectation(description: "OPCUA")
//        let nodes: [MonitoredItemCreateRequest] = [
//            MonitoredItemCreateRequest(
//                itemToMonitor: ReadValue(nodeId: NodeIdNumeric(nameSpace: 0, identifier: 2258)),
//                requestedParameters: MonitoringParameters(clientHandle: 1, samplingInterval: 300, queueSize: 1)
//            ),
//            MonitoredItemCreateRequest(
//                itemToMonitor: ReadValue(nodeId: NodeIdString(nameSpace: 3, identifier: "Counter")),
//                requestedParameters: MonitoringParameters(clientHandle: 2, samplingInterval: 300, queueSize: 1)
//            ),
//            MonitoredItemCreateRequest(
//                itemToMonitor:  ReadValue(nodeId: NodeIdString(nameSpace: 5, identifier: "MyLevel")),
//                requestedParameters: MonitoringParameters(clientHandle: 3, samplingInterval: 300, queueSize: 1)
//            )
//        ]
//        opcua.onDataChanged = { data in
//            data.forEach { dataChange in
//                print("\(dataChange.typeId)")
//                dataChange.dataChangeNotification.monitoredItems.forEach { item in
//                    if let node = nodes.first(where: { $0.requestedParameters.clientHandle == item.monitoredId }) {
//                        print("\(node.itemToMonitor.nodeId): \(item.value.variant.value)")
//                    }
//                }
//            }
//
//            if count > 5 {
//                XCTAssertTrue(count > 0)
//                expectation.fulfill()
//            }
//            count += 1
//        }

        opcua.onHandlerRemoved = {
            print("OPCUA Client disconnected")
        }
        opcua.onErrorCaught = { error in
            print(error)
        }
        
        do {
            //try opcua.connect(username: "admin", password: "admin", reconnect: false).wait()
            try opcua.connect(reconnect: false).wait()
            
//            let nodes: [BrowseDescription] = [
//                BrowseDescription(nodeId: NodeIdNumeric(nameSpace: 0, identifier: 2253)),
//                BrowseDescription(nodeId: NodeIdNumeric(nameSpace: 0, identifier: 2256))
//            ]
//            let items = try opcua.browse().wait()
//            for item in items {
//                item.references.forEach { ref in
//                    print("\(ref.displayName.text): \(ref.nodeId)")
//                }
//            }
            
//            let subscription = Subscription(
//                requestedPubliscingInterval: 1000,
//                requestedLifetimeCount: 5,
//                requesteMaxKeepAliveCount: 5,
//                maxNotificationsPerPublish: 5,
//                publishingEnabled: true,
//                priority: 10
//            )
//            let subId = try opcua.createSubscription(subscription: subscription, startPubliscing: true).wait()
//            let results = try opcua.createMonitoredItems(subscriptionId: subId, itemsToCreate: nodes).wait()
//            results.forEach { result in
//                print("createMonitoredItem: \(result.monitoredItemId) = \(result.statusCode)")
//            }
//
//            wait(for: [expectation], timeout: 10.0)
//
//            let deleted = try opcua.deleteSubscriptions(subscriptionIds: [subId]).wait()
//            deleted.forEach { result in
//                print("deleteSubscription: \(result)")
//            }

//            let reads = [ReadValue(nodeId: NodeIdString(nameSpace: 3, identifier: "Counter"))]
//            let readed = try opcua.read(nodes: reads).wait()
//            print(readed.first?.variant.value ?? "nil")

            let writes: [WriteValue] = [
                WriteValue(
                    nodeId: NodeIdNumeric(nameSpace: 2, identifier: 20485),
                    value: DataValue(variant: Variant(value: Int32(1)))
                )
            ]
            let writed = try opcua.write(nodes: writes).wait()
            print(writed.first!)

            try opcua.disconnect().wait()
        } catch {
            XCTFail("\(error)")
        }
    }
    
    func testPublishResponse() {
        let bytes: [UInt8] = [
            //0x4d, 0x53, 0x47, 0x46, 0x14, 0x02, 0x00, 0x00,
            0x55, 0xd9, 0xef, 0xa9, 0x01, 0x00, 0x00, 0x00,
            0x3c, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x3d, 0x03, 0x74, 0xf5, 0x3e, 0x8a,
            0xd3, 0x8a, 0xd6, 0x01, 0x0b, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x04, 0x88, 0xf2, 0xa7,
            0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x01, 0x01, 0x00, 0x00, 0x00, 0xea, 0xca, 0x3e,
            0x8a, 0xd3, 0x8a, 0xd6, 0x01, 0x01, 0x00, 0x00,
            0x00, 0x01, 0x00, 0x2b, 0x03, 0x01, 0xb2, 0x01,
            0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x01, 0x00,
            0x00, 0x00, 0x0d, 0x11, 0x01, 0x02, 0x4e, 0x4e,
            0x58, 0xad, 0x39, 0x8a, 0xd3, 0x8a, 0xd6, 0x01,
            0x4e, 0xad, 0x39, 0x8a, 0xd3, 0x8a, 0xd6, 0x01,
            0x02, 0x00, 0x00, 0x00, 0x0d, 0x06, 0x02, 0x00,
            0x00, 0x00, 0x98, 0xae, 0x39, 0x8a, 0xd3, 0x8a,
            0xd6, 0x01, 0x8e, 0xae, 0x39, 0x8a, 0xd3, 0x8a,
            0xd6, 0x01, 0x03, 0x00, 0x00, 0x00, 0x0d, 0x14,
            0x02, 0x00, 0x37, 0x00, 0x00, 0x00, 0x41, 0x6c,
            0x61, 0x72, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73,
            0x56, 0x69, 0x73, 0x75, 0x31, 0x2e, 0x41, 0x31,
            0x30, 0x33, 0x5f, 0x42, 0x39, 0x4d, 0x6f, 0x74,
            0x54, 0x68, 0x65, 0x72, 0x6d, 0x53, 0x77, 0x5f,
            0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x31, 0x30,
            0x33, 0x5f, 0x39, 0x30, 0x31, 0x5f, 0x42, 0x42,
            0x4f, 0x58, 0x5f, 0x31, 0x33, 0x0a, 0xb0, 0x39,
            0x8a, 0xd3, 0x8a, 0xd6, 0x01, 0xf6, 0xaf, 0x39,
            0x8a, 0xd3, 0x8a, 0xd6, 0x01, 0x04, 0x00, 0x00,
            0x00, 0x0d, 0x15, 0x02, 0x38, 0x00, 0x00, 0x00,
            0x41, 0x6c, 0x61, 0x72, 0x6d, 0x43, 0x6c, 0x61,
            0x73, 0x73, 0x56, 0x69, 0x73, 0x75, 0x31, 0x2e,
            0x41, 0x31, 0x30, 0x34, 0x5f, 0x42, 0x31, 0x30,
            0x4d, 0x6f, 0x74, 0x54, 0x68, 0x65, 0x72, 0x6d,
            0x53, 0x77, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
            0x5f, 0x31, 0x30, 0x34, 0x5f, 0x39, 0x30, 0x31,
            0x5f, 0x42, 0x42, 0x4f, 0x58, 0x5f, 0x31, 0x33,
            0x4c, 0xb4, 0x39, 0x8a, 0xd3, 0x8a, 0xd6, 0x01,
            0x38, 0xb4, 0x39, 0x8a, 0xd3, 0x8a, 0xd6, 0x01,
            0x05, 0x00, 0x00, 0x00, 0x0d, 0x15, 0x02, 0x35,
            0x00, 0x00, 0x00, 0x41, 0x6c, 0x61, 0x72, 0x6d,
            0x43, 0x6c, 0x61, 0x73, 0x73, 0x56, 0x69, 0x73,
            0x75, 0x31, 0x5f, 0x41, 0x31, 0x30, 0x35, 0x5f,
            0x50, 0x77, 0x72, 0x53, 0x75, 0x70, 0x41, 0x75,
            0x78, 0x39, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
            0x5f, 0x31, 0x30, 0x35, 0x5f, 0x39, 0x30, 0x31,
            0x5f, 0x42, 0x42, 0x4f, 0x58, 0x5f, 0x31, 0x33,
            0x16, 0xc2, 0x39, 0x8a, 0xd3, 0x8a, 0xd6, 0x01,
            0xe4, 0xc1, 0x39, 0x8a, 0xd3, 0x8a, 0xd6, 0x01,
            0x06, 0x00, 0x00, 0x00, 0x0d, 0x07, 0x00, 0x00,
            0x00, 0x00, 0x22, 0xc5, 0x39, 0x8a, 0xd3, 0x8a,
            0xd6, 0x01, 0x0e, 0xc5, 0x39, 0x8a, 0xd3, 0x8a,
            0xd6, 0x01, 0x07, 0x00, 0x00, 0x00, 0x0d, 0x07,
            0x00, 0x00, 0x00, 0x00, 0x8a, 0xc6, 0x39, 0x8a,
            0xd3, 0x8a, 0xd6, 0x01, 0x76, 0xc6, 0x39, 0x8a,
            0xd3, 0x8a, 0xd6, 0x01, 0x0d, 0x00, 0x00, 0x00,
            0x0d, 0x06, 0x00, 0x00, 0x00, 0x00, 0x1a, 0xc8,
            0x39, 0x8a, 0xd3, 0x8a, 0xd6, 0x01, 0x06, 0xc8,
            0x39, 0x8a, 0xd3, 0x8a, 0xd6, 0x01, 0x0e, 0x00,
            0x00, 0x00, 0x0d, 0x11, 0x00, 0x06, 0x22, 0xca,
            0x39, 0x8a, 0xd3, 0x8a, 0xd6, 0x01, 0x18, 0xca,
            0x39, 0x8a, 0xd3, 0x8a, 0xd6, 0x01, 0x0f, 0x00,
            0x00, 0x00, 0x0d, 0x06, 0xff, 0xff, 0xff, 0xff,
            0xba, 0xd2, 0x39, 0x8a, 0xd3, 0x8a, 0xd6, 0x01,
            0x92, 0xd2, 0x39, 0x8a, 0xd3, 0x8a, 0xd6, 0x01,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00
        ]
        
        let p = PublishResponse(bytes: bytes)
        XCTAssertTrue(p.notificationMessage.notificationData.count > 0)
    }
    
    
    static var allTests = [
        ("testExample", testExample),
        ("testPublishResponse", testPublishResponse)
    ]
}
